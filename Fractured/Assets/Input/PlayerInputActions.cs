//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Input/PlayerInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputActions"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""f5d3c201-109b-43ea-9601-13be383e805c"",
            ""actions"": [
                {
                    ""name"": ""PlayerMovement"",
                    ""type"": ""Value"",
                    ""id"": ""a83066c7-7905-48be-8116-54dcc85dbefd"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""PlayerLook"",
                    ""type"": ""PassThrough"",
                    ""id"": ""a4bb49b9-b3e4-44a4-8ffd-7dbdfcf0f30a"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PlayerSprint"",
                    ""type"": ""Button"",
                    ""id"": ""db74a303-16fb-473b-a6da-f648ce04e3fe"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PlayerInteract"",
                    ""type"": ""Button"",
                    ""id"": ""69324c3d-251f-4392-90fa-b6aae664785d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PlayerFlash"",
                    ""type"": ""Button"",
                    ""id"": ""de06d415-3e93-4031-a517-4a2f63a5551b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PlayerPause"",
                    ""type"": ""Button"",
                    ""id"": ""b238ad00-ba8f-4013-b2f7-6f95b4bc4305"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""67ced1e4-27b4-4b51-a569-e5558a019d9b"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerMovement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""fa7879e9-cf6b-4572-ae99-a500131013fb"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""PlayerMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""2cafcc52-6ec2-4478-9391-dc4620ade340"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""PlayerMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""1a4dd191-1e2a-440a-83be-38720d398734"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""PlayerMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""f7b8b1e1-fde7-4024-9b9e-9e029f7bfd05"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""PlayerMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""ccdfcc9f-a00a-4f60-877c-54d234ffbebc"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerLook"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6f5039fd-192d-441e-b7d5-7637d8057cd7"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""PlayerSprint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""640263e0-4409-420d-a1f3-ef94474229c1"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""PlayerInteract"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""16b06449-e221-4fd1-9156-565f67089d28"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""PlayerFlash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a728d202-7956-493f-bcb5-b93d7ddc7982"",
                    ""path"": ""<Keyboard>/p"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""PlayerPause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard"",
            ""bindingGroup"": ""Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_PlayerMovement = m_Player.FindAction("PlayerMovement", throwIfNotFound: true);
        m_Player_PlayerLook = m_Player.FindAction("PlayerLook", throwIfNotFound: true);
        m_Player_PlayerSprint = m_Player.FindAction("PlayerSprint", throwIfNotFound: true);
        m_Player_PlayerInteract = m_Player.FindAction("PlayerInteract", throwIfNotFound: true);
        m_Player_PlayerFlash = m_Player.FindAction("PlayerFlash", throwIfNotFound: true);
        m_Player_PlayerPause = m_Player.FindAction("PlayerPause", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private IPlayerActions m_PlayerActionsCallbackInterface;
    private readonly InputAction m_Player_PlayerMovement;
    private readonly InputAction m_Player_PlayerLook;
    private readonly InputAction m_Player_PlayerSprint;
    private readonly InputAction m_Player_PlayerInteract;
    private readonly InputAction m_Player_PlayerFlash;
    private readonly InputAction m_Player_PlayerPause;
    public struct PlayerActions
    {
        private @PlayerInputActions m_Wrapper;
        public PlayerActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @PlayerMovement => m_Wrapper.m_Player_PlayerMovement;
        public InputAction @PlayerLook => m_Wrapper.m_Player_PlayerLook;
        public InputAction @PlayerSprint => m_Wrapper.m_Player_PlayerSprint;
        public InputAction @PlayerInteract => m_Wrapper.m_Player_PlayerInteract;
        public InputAction @PlayerFlash => m_Wrapper.m_Player_PlayerFlash;
        public InputAction @PlayerPause => m_Wrapper.m_Player_PlayerPause;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterface != null)
            {
                @PlayerMovement.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnPlayerMovement;
                @PlayerMovement.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnPlayerMovement;
                @PlayerMovement.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnPlayerMovement;
                @PlayerLook.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnPlayerLook;
                @PlayerLook.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnPlayerLook;
                @PlayerLook.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnPlayerLook;
                @PlayerSprint.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnPlayerSprint;
                @PlayerSprint.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnPlayerSprint;
                @PlayerSprint.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnPlayerSprint;
                @PlayerInteract.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnPlayerInteract;
                @PlayerInteract.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnPlayerInteract;
                @PlayerInteract.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnPlayerInteract;
                @PlayerFlash.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnPlayerFlash;
                @PlayerFlash.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnPlayerFlash;
                @PlayerFlash.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnPlayerFlash;
                @PlayerPause.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnPlayerPause;
                @PlayerPause.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnPlayerPause;
                @PlayerPause.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnPlayerPause;
            }
            m_Wrapper.m_PlayerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @PlayerMovement.started += instance.OnPlayerMovement;
                @PlayerMovement.performed += instance.OnPlayerMovement;
                @PlayerMovement.canceled += instance.OnPlayerMovement;
                @PlayerLook.started += instance.OnPlayerLook;
                @PlayerLook.performed += instance.OnPlayerLook;
                @PlayerLook.canceled += instance.OnPlayerLook;
                @PlayerSprint.started += instance.OnPlayerSprint;
                @PlayerSprint.performed += instance.OnPlayerSprint;
                @PlayerSprint.canceled += instance.OnPlayerSprint;
                @PlayerInteract.started += instance.OnPlayerInteract;
                @PlayerInteract.performed += instance.OnPlayerInteract;
                @PlayerInteract.canceled += instance.OnPlayerInteract;
                @PlayerFlash.started += instance.OnPlayerFlash;
                @PlayerFlash.performed += instance.OnPlayerFlash;
                @PlayerFlash.canceled += instance.OnPlayerFlash;
                @PlayerPause.started += instance.OnPlayerPause;
                @PlayerPause.performed += instance.OnPlayerPause;
                @PlayerPause.canceled += instance.OnPlayerPause;
            }
        }
    }
    public PlayerActions @Player => new PlayerActions(this);
    private int m_KeyboardSchemeIndex = -1;
    public InputControlScheme KeyboardScheme
    {
        get
        {
            if (m_KeyboardSchemeIndex == -1) m_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Keyboard");
            return asset.controlSchemes[m_KeyboardSchemeIndex];
        }
    }
    public interface IPlayerActions
    {
        void OnPlayerMovement(InputAction.CallbackContext context);
        void OnPlayerLook(InputAction.CallbackContext context);
        void OnPlayerSprint(InputAction.CallbackContext context);
        void OnPlayerInteract(InputAction.CallbackContext context);
        void OnPlayerFlash(InputAction.CallbackContext context);
        void OnPlayerPause(InputAction.CallbackContext context);
    }
}
